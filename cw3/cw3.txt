// Triangle.cpp
// Our first OpenGL program that will just draw a triangle on the screen.

#include <stdafx.h>
#include <GLTools.h>            // OpenGL toolkit

#define FREEGLUT_STATIC
#include <GL/glut.h>            // Windows FreeGlut equivalent
#include <StopWatch.h>
#include <GLFrustum.h>
#include <GLFrame.h>
#include <GLMatrixStack.h>
#include <GLGeometryTransform.h>
#include <math3d.h>
#define M_PI 3.14

GLuint shader;
GLFrame cameraFrame;
GLFrustum viewFrustum;

M3DMatrix44f mCamera;
M3DMatrix44f mFrustum;

float MVPMatrix [] = {1,0,0,0, 0,1,0,0, 0,0,1,0 ,0,0,0,1}; //macierz przeksztalcen
int MVPMatrixLocation;
CStopWatch timer;
///////////////////////////////////////////////////////////////////////////////
// Window has changed size, or has just been created. In either case, we need
// to use the window dimensions to set the viewport and the projection matrix.

void ChangeSize(int w, int h) {
    glViewport(0, 0, w, h);
	viewFrustum.SetPerspective(110.0,(float)w/(float)h, 1,50.0);
}

void SetUpFrame(GLFrame &frame,const M3DVector3f origin,
				const M3DVector3f forward,
				const M3DVector3f up) {
					frame.SetOrigin(origin);
					frame.SetForwardVector(forward);
M3DVector3f side,oUp;
m3dCrossProduct3(side,forward,up);
m3dCrossProduct3(oUp,side,forward);
frame.SetUpVector(oUp);
frame.Normalize();
};

void LookAt(GLFrame &frame, const M3DVector3f eye,
        const M3DVector3f at,
        const M3DVector3f up) {
    M3DVector3f forward;
    m3dSubtractVectors3(forward, at, eye);
    SetUpFrame(frame, eye, forward, up);
}
///////////////////////////////////////////////////////////////////////////////
// This function does any needed initialization on the rendering context.
// This is the first opportunity to do any OpenGL related tasks.



void SetupRC() {
    // Blue background
    glClearColor(0.0f, 0.0f, 1.0f, 1.0f);

    shader = gltLoadShaderPairWithAttributes("pass_thru_shader.vp", "pass_thru_shader.fp",
            2, GLT_ATTRIBUTE_VERTEX, "vVertex", GLT_ATTRIBUTE_COLOR, "vColor");
    fprintf(stdout, "GLT_ATTRIBUTE_VERTEX : %d\nGLT_ATTRIBUTE_COLOR : %d \n",
            GLT_ATTRIBUTE_VERTEX, GLT_ATTRIBUTE_COLOR);
	MVPMatrixLocation=glGetUniformLocation(shader,"mMVP");
	if(MVPMatrixLocation==-1){
		fprintf(stderr,"uniform MVPMatrix nie znaleziono\n");
	} else
		fprintf(stderr,"znalazlem\n");

	glEnable( GL_DEPTH_TEST );
	
	
}

///////////////////////////////////////////////////////////////////////////////
// Called to draw scene

void RenderScene(void) {
    // Clear the window with current clearing color
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
	

M3DVector3f at={0,0,0};
M3DVector3f up={0,4,0};
M3DVector3f eye;
float angle = timer.GetElapsedSeconds()* M3D_PI;

eye[0]=4.0*cos(angle);
eye[2]=4.0*sin(angle);
eye[1]=3.0f;
LookAt(cameraFrame,eye,at,up);

GLMatrixStack matrixStack;
GLMatrixStack modelView;
GLMatrixStack projection;
GLGeometryTransform geometryPipeline;
geometryPipeline.SetMatrixStacks(modelView,projection);

projection.LoadMatrix(viewFrustum.GetProjectionMatrix());
modelView.PushMatrix();

cameraFrame.GetCameraMatrix(mCamera);

modelView.LoadMatrix(mCamera);
modelView.PushMatrix();

	//M3DMatrix44f ViewProjectionMatrix;
	//m3dMatrixMultiply44(ViewProjectionMatrix,viewFrustum.GetProjectionMatrix() , mCamera);

//glUniformMatrix4fv(MVPMatrixLocation,1,GL_FALSE,ViewProjectionMatrix);
glUniformMatrix4fv(MVPMatrixLocation,1,GL_FALSE,geometryPipeline.GetModelViewProjectionMatrix());
	//podloga
	glBegin(GL_LINES);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 1.0, 1.0, 1.0);
	glVertex3f(2.0f, 0.0f, 0.0f);
	glVertex3f(-2.0f, 0.0f, 0.0f);
	glVertex3f(2.0f, 0.0f, 1.0f);
	glVertex3f(-2.0f, 0.0f, 1.0f);
	glVertex3f(2.0f, 0.0f, -1.0f);
	glVertex3f(-2.0f, 0.0f, -1.0f);
	glVertex3f(2.0f, 0.0f, -2.0f);
	glVertex3f(-2.0f, 0.0f, -2.0f);
	glVertex3f(2.0f, 0.0f, -2.0f);
	glVertex3f(2.0f, 0.0f, 2.0f);

	glVertex3f(0.0f, 0.0f, 2.0f);
	glVertex3f(0.0f, 0.0f, -2.0f);
	glVertex3f(1.0f, 0.0f, 2.0f);
	glVertex3f(1.0f, 0.0f, -2.0f);
	glVertex3f(-1.0f, 0.0f, 2.0f);
	glVertex3f(-1.0f, 0.0f, -2.0f);
	glVertex3f(-2.0f, 0.0f, 2.0f);
	glVertex3f(2.0f, 0.0f, 2.0f);
	glVertex3f(-2.0f, 0.0f, 2.0f);
	glVertex3f(-2.0f, 0.0f, -2.0f);
	glEnd();



	
    glUseProgram(shader);
	

	

	modelView.Translate(3.0f,0.0f,0.0f);
glUniformMatrix4fv(MVPMatrixLocation,1,GL_FALSE,geometryPipeline.GetModelViewProjectionMatrix());

	//kwadrat	
	glBegin(GL_QUADS);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 0.5, 0.5, 0.5);
	glVertex3f(-0.5f, 0.0f, -0.5f);
	glVertex3f(0.5f, 0.0f, -0.5f);
	glVertex3f(0.5f, 0.0f, 0.5f);
    glVertex3f(-0.5f, 0.0f, 0.5f);
	glEnd();

	//tr1
	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 1.0, 0.3, 0.4);
    glVertex3f(0.5f, 0.0f, -0.5f);
	glVertex3f(-0.5f, 0.0f, -0.5f);
	glVertex3f(0.0f, 1.0f, 0.0f);
glEnd();	//tr2
	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 0.5, 0.3, 0.3);
	glVertex3f(-0.5f, 0.0f, -0.5f);
    glVertex3f(-0.5f, 0.0f, 0.5f);
    glVertex3f(0.0f, 1.0f, 0.0f);
glEnd();
	//tr3
	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 0.0, 0.9, 0.9);
    glVertex3f(-0.5f, 0.0f, 0.5f);
    glVertex3f(0.5f, 0.0f, 0.5f);
    glVertex3f(0.0f, 1.0f, 0.0f);
glEnd();
	//tr4
	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 0.0, 0.9, 0.1);
    glVertex3f(0.5f, 0.0f, 0.5f);
    glVertex3f(0.5f, 0.0f, -0.5f);
    glVertex3f(0.0f, 1.0f, 0.0f);

glEnd();


modelView.PopMatrix();
modelView.Rotate(angle,angle*0.4f, angle*-0.1f, angle*-0.7f);
modelView.Translate(0.0,0.0,0.0);
glUniformMatrix4fv(MVPMatrixLocation,1,GL_FALSE,geometryPipeline.GetModelViewProjectionMatrix());

	//kwadrat	
	glBegin(GL_QUADS);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 0.5, 0.5, 0.5);
	glVertex3f(-0.5f, 0.0f, -0.5f);
	glVertex3f(0.5f, 0.0f, -0.5f);
	glVertex3f(0.5f, 0.0f, 0.5f);
    glVertex3f(-0.5f, 0.0f, 0.5f);
	glEnd();

	//tr1
	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 1.0, 0.3, 0.4);
    glVertex3f(0.5f, 0.0f, -0.5f);
	glVertex3f(-0.5f, 0.0f, -0.5f);
	glVertex3f(0.0f, 1.0f, 0.0f);
glEnd();	//tr2
	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 0.5, 0.3, 0.3);
	glVertex3f(-0.5f, 0.0f, -0.5f);
    glVertex3f(-0.5f, 0.0f, 0.5f);
    glVertex3f(0.0f, 1.0f, 0.0f);
glEnd();
	//tr3
	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 0.0, 0.9, 0.9);
    glVertex3f(-0.5f, 0.0f, 0.5f);
    glVertex3f(0.5f, 0.0f, 0.5f);
    glVertex3f(0.0f, 1.0f, 0.0f);
glEnd();
	//tr4
	glBegin(GL_TRIANGLES);
	glVertexAttrib3f(GLT_ATTRIBUTE_COLOR, 0.0, 0.9, 0.1);
    glVertex3f(0.5f, 0.0f, 0.5f);
    glVertex3f(0.5f, 0.0f, -0.5f);
    glVertex3f(0.0f, 1.0f, 0.0f);

glEnd();



    // Perform the buffer swap to display back buffer
    glutSwapBuffers();
	glutPostRedisplay();


}


///////////////////////////////////////////////////////////////////////////////
// Main entry point for GLUT based programs

int main(int argc, char* argv[]) {
  

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH | GLUT_STENCIL);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Triangle");
    glutReshapeFunc(ChangeSize);
    glutDisplayFunc(RenderScene);

    GLenum err = glewInit();
    if (GLEW_OK != err) {
        fprintf(stderr, "GLEW Error: %s\n", glewGetErrorString(err));
        return 1;
    }
	
	
    SetupRC();

    glutMainLoop();
    return 0;
}
